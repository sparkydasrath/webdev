{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/ts/Dom.ts","src/ts/OperatorType.ts","src/ts/Ops.ts","src/ts/StringUtility.ts","src/ts/app.ts"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","class Dom {\r\n    buttonContainer: HTMLElement | null | undefined;\r\n    addButton: HTMLButtonElement | null | undefined;\r\n    subtractButton: HTMLButtonElement | null | undefined;\r\n    multiplyButton: HTMLButtonElement | null | undefined;\r\n    divideButton: HTMLButtonElement | null | undefined;\r\n    negateButton: HTMLButtonElement | null | undefined;\r\n    equalButton: HTMLButtonElement | null | undefined;\r\n    resultDisplay: HTMLElement | null | undefined;\r\n    summaryDisplay: HTMLElement | null | undefined;\r\n}\r\n\r\nexport default Dom;\r\n","export enum OperatorType {\r\n    None = \"\",\r\n    Add = \"Add\",\r\n    Subtract = \"Subtract\",\r\n    Multiply = \"Multiply\",\r\n    Divide = \"Divide\",\r\n    PlusMinus = \"PlusMinus\",\r\n    Equal = \"Equal\",\r\n    ClearEntry = \"ClearEntry\",\r\n    ClearAll = \"ClearAll\",\r\n    Backspace = \"Backspace\"\r\n}\r\n","import { IOps } from \"./interfaces/IOps\";\r\n\r\nclass Ops implements IOps {\r\n    add(x: number, y: number): number {\r\n        return x + y;\r\n    }\r\n    subtract(x: number, y: number): number {\r\n        return x - y;\r\n    }\r\n    multiply(x: number, y: number): number {\r\n        return x * y;\r\n    }\r\n    divide(x: number, y: number): number {\r\n        if (y === 0) return 0;\r\n        return x / y;\r\n    }\r\n    plusMinus(x: number): number {\r\n        return (-1) * x;\r\n    }\r\n}\r\n\r\nexport default Ops;","export class StringUtility {\r\n    public static replaceAt(oringalString: string, replacementString: string, position: number): string {\r\n        let origAsArray = oringalString.split(\"\");\r\n        origAsArray[position] = replacementString;\r\n        let finalString = origAsArray.join(\"\");\r\n        return finalString;\r\n    }\r\n}\r\n","import Ops from \"./Ops\";\r\nimport Dom from \"./Dom\";\r\nimport { StringUtility } from \"./StringUtility\";\r\nimport { OperatorType } from \"./OperatorType\";\r\n\r\nclass MainView {\r\n\r\n    clickEvent: string = \"click\";\r\n    buttonContainerClassName: string = \".btn-container\";\r\n    resultDisplayClassName: string = \".result-display\";\r\n    summaryDisplayClassName: string = \".summary-display\";\r\n\r\n    leftAsString: string = \"\";\r\n    left: number = 0;\r\n    right: number = 0;\r\n    rightAsString: string = \"\";\r\n    total: number = 0;\r\n    opType: OperatorType = OperatorType.None;\r\n    opTypeHtml: string = \"\";\r\n    useLeftForSummary: boolean = true;\r\n    opPressedCount: number = 0;\r\n\r\n    private dom: Dom = new Dom();\r\n    private ops: Ops = new Ops();\r\n\r\n    private cacheDom(): void {\r\n        this.dom.buttonContainer = <HTMLElement>document.querySelector(this.buttonContainerClassName);\r\n        this.dom.summaryDisplay = <HTMLElement>document.querySelector(this.summaryDisplayClassName);\r\n        this.dom.resultDisplay = <HTMLElement>document.querySelector(this.resultDisplayClassName);\r\n    }\r\n\r\n    public bindEvents() {\r\n        if (this.dom.buttonContainer !== null && this.dom.buttonContainer !== undefined) {\r\n            this.dom.buttonContainer.addEventListener(this.clickEvent, this.handleBtnContainerClick);\r\n        }\r\n    }\r\n\r\n    public handleBtnContainerClick = (event: Event): void => {\r\n        // had to do the event handler this way in order to pass along the correct 'this'\r\n        //  context to it\r\n        // see: https://stackoverflow.com/questions/18423410/typescript-retain-scope-in-event-listener\r\n        let srcButton = <HTMLButtonElement>event.srcElement;\r\n        if (srcButton === null || srcButton === undefined) {\r\n            console.error(\"Can't find the button that was clicked\");\r\n            return;\r\n        }\r\n\r\n        let srcButtonValue = srcButton.innerHTML;\r\n        let clearData: string | null = srcButton.getAttribute(\"data-opClear\");\r\n        if ((srcButtonValue >= \"0\" && srcButtonValue <= \"9\") || srcButtonValue === \".\")\r\n            this.handleNumberButtonPressed(srcButtonValue);\r\n        else if (clearData !== null) {\r\n            this.handleClear(clearData);\r\n        }\r\n        else {\r\n            // get the data that knows what operator button was pressed \r\n            this.opTypeHtml = srcButtonValue;\r\n            this.handleOperatorButtonPressed(srcButton.getAttribute(\"data-opType\"), srcButtonValue);\r\n        };\r\n    }\r\n\r\n    private handleOperatorButtonPressed(opPressed: string | null, htmlContentOfOp: string): void {\r\n\r\n        this.opPressedCount++;\r\n\r\n        if (opPressed === null) {\r\n            console.error(\"Operation selected is null\");\r\n            return;\r\n        }\r\n        else if (opPressed === OperatorType.Equal) {\r\n            this.computeTotal();\r\n            this.updateViewPipeline(true, htmlContentOfOp);\r\n            return;\r\n        }\r\n\r\n        else if (opPressed == OperatorType.PlusMinus) {\r\n            this.opPressedCount--;\r\n            this.handlePlusMinusCase();\r\n            return;\r\n        }\r\n\r\n        else if (this.opType === OperatorType.None) {\r\n            this.opType = <OperatorType>opPressed;\r\n            this.updateSummaryDisplay(htmlContentOfOp);\r\n            return;\r\n        }\r\n\r\n        else {\r\n            this.computeTotal();\r\n            this.opType = <OperatorType>opPressed;\r\n            this.updateViewPipeline(false, htmlContentOfOp);\r\n            return;\r\n        }\r\n    }\r\n\r\n    private updateViewPipeline(canClearSummaryDisplay: boolean, htmlContentOfOp: string) {\r\n        if (canClearSummaryDisplay) {\r\n            this.clearSummaryDisplay();\r\n        }\r\n        else {\r\n            this.updateSummaryDisplay(htmlContentOfOp);\r\n        }\r\n\r\n        this.updateLeftAndRightValues();\r\n        this.displayResult();\r\n    }\r\n\r\n    private handlePlusMinusCase(): void {\r\n        if (this.dom.resultDisplay === null || this.dom.resultDisplay === undefined) {\r\n            console.error(\"handlePlusMinusCase(): Unable to find results display\");\r\n            return;\r\n        }\r\n\r\n        let currentDisplay = this.dom.resultDisplay.innerHTML;\r\n        let convertedToNumber = Number(currentDisplay)\r\n        let pmResult = this.ops.plusMinus(convertedToNumber);\r\n\r\n        if (this.useLeftForSummary) {\r\n            this.leftAsString = pmResult.toString();\r\n        }\r\n        else {\r\n            this.rightAsString = pmResult.toString();\r\n        }\r\n\r\n        this.dom.resultDisplay.innerHTML = pmResult.toString();\r\n    }\r\n\r\n    private computeTotal(): void {\r\n        this.left = Number(this.leftAsString);\r\n        this.right = Number(this.rightAsString);\r\n\r\n        switch (this.opType) {\r\n            case (OperatorType.None): {\r\n                break;\r\n            }\r\n            case (OperatorType.Add): {\r\n                this.total = this.ops.add(this.left, this.right);\r\n                break;\r\n            }\r\n            case (OperatorType.Subtract): {\r\n                this.total = this.ops.subtract(this.left, this.right);\r\n                break;\r\n            }\r\n            case (OperatorType.Multiply): {\r\n                this.total = this.ops.multiply(this.left, this.right);\r\n                break;\r\n            }\r\n            case (OperatorType.Divide): {\r\n                this.total = this.ops.divide(this.left, this.right);\r\n                break;\r\n            }\r\n\r\n            default: {\r\n                console.log(`Operator ${this.opType} is not defined`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private displayResult(): void {\r\n        if (this.dom.resultDisplay !== null && this.dom.resultDisplay !== undefined) {\r\n            this.dom.resultDisplay.textContent = `${this.total}`;\r\n        }\r\n    }\r\n\r\n    private displayLeft(): void {\r\n        if (this.dom.resultDisplay !== null && this.dom.resultDisplay !== undefined) {\r\n            this.dom.resultDisplay.textContent = this.leftAsString;\r\n        }\r\n    }\r\n\r\n    private displayRight(): void {\r\n        if (this.dom.resultDisplay !== null && this.dom.resultDisplay !== undefined) {\r\n            this.dom.resultDisplay.textContent = this.rightAsString;\r\n        }\r\n    }\r\n\r\n    private clearSummaryDisplay(): void {\r\n\r\n        if (this.dom.summaryDisplay === null || this.dom.summaryDisplay === undefined) {\r\n            console.log(\"checkSummaryDisplayForNullOrUndefined(): Summary display is null or undefined\");\r\n            return;\r\n        }\r\n\r\n        else {\r\n            this.dom.summaryDisplay.innerHTML = \"\";\r\n            this.useLeftForSummary = true;\r\n            this.opPressedCount = 0;\r\n        }\r\n    }\r\n\r\n    private updateSummaryDisplay(opPressedHtml: string): void {\r\n        if (this.dom.summaryDisplay === null || this.dom.summaryDisplay === undefined) {\r\n            console.error(\"Unable to populate summary value\");\r\n            return;\r\n        }\r\n\r\n        if (this.opPressedCount > 1) {\r\n            this.partialSummaryDisplayUpdate(opPressedHtml);\r\n            return;\r\n        }\r\n\r\n        if (this.useLeftForSummary) {\r\n            this.fullLeftSummaryDisplayUpdate();\r\n            this.useLeftForSummary = false;\r\n        }\r\n        else {\r\n            this.fullRightSummaryDisplayUpdate();\r\n        }\r\n    }\r\n\r\n    private fullLeftSummaryDisplayUpdate(): void {\r\n        if (this.dom.summaryDisplay === null || this.dom.summaryDisplay === undefined) {\r\n            console.error(\"fullSummaryDisplayUpdate(): Unable to do a full summary display update\");\r\n            return;\r\n        }\r\n        this.dom.summaryDisplay.innerHTML += this.leftAsString + \" \" + this.opTypeHtml + \" \";\r\n    }\r\n\r\n    private fullRightSummaryDisplayUpdate(): void {\r\n        if (this.dom.summaryDisplay === null || this.dom.summaryDisplay === undefined) {\r\n            console.error(\"fullSummaryDisplayUpdate(): Unable to do a full summary display update\");\r\n            return;\r\n        }\r\n        this.dom.summaryDisplay.innerHTML += this.rightAsString + \" \" + this.opTypeHtml + \" \";\r\n    }\r\n\r\n    private partialSummaryDisplayUpdate(opPressedHtml: string): void {\r\n        if (this.dom.summaryDisplay === null || this.dom.summaryDisplay === undefined) {\r\n            console.error(\"partialSummaryDisplayUpdate(): Unable to do a partial summary display update\");\r\n            return;\r\n        }\r\n        let replaced = this.replaceLastDisplayedOperatorWithCurrentOne(this.dom.summaryDisplay.innerHTML, opPressedHtml);\r\n        this.dom.summaryDisplay.innerHTML = replaced;\r\n    }\r\n\r\n    private replaceLastDisplayedOperatorWithCurrentOne(valueToModify: string, replacementValue: string): string {\r\n        let currentDisplay = StringUtility.replaceAt(valueToModify, replacementValue, valueToModify.length - 2);\r\n        return currentDisplay;\r\n    }\r\n\r\n    private updateLeftAndRightValues() {\r\n        this.leftAsString = this.total.toString();\r\n        this.left = this.total;\r\n        this.rightAsString = \"\";\r\n        this.right = 0;\r\n    }\r\n\r\n    private handleNumberButtonPressed(pressedNumber: string): void {\r\n        this.opPressedCount = 0;\r\n\r\n        if (this.leftAsString === \"\" || this.opType === OperatorType.None) {\r\n            this.leftAsString += pressedNumber;\r\n            this.displayLeft();\r\n        }\r\n        else {\r\n            this.rightAsString += pressedNumber;\r\n            this.displayRight();\r\n        }\r\n    }\r\n\r\n    public handleClear(clearData: string | null): void {\r\n        if (clearData === <OperatorType>OperatorType.ClearAll) {\r\n            this.clearSummaryAndResultDisplay();\r\n            return;\r\n        }\r\n        if (clearData === <OperatorType>OperatorType.ClearEntry) {\r\n            this.clearResultDisplay();\r\n            return;\r\n        }\r\n        if (clearData === <OperatorType>OperatorType.Backspace) {\r\n            this.performBackspaceOnCurrentEntry();\r\n            return;\r\n        }\r\n    }\r\n\r\n    private clearSummaryAndResultDisplay(): void {\r\n\r\n        if (this.dom.summaryDisplay === null ||\r\n            this.dom.summaryDisplay === undefined ||\r\n            this.dom.resultDisplay === null ||\r\n            this.dom.resultDisplay === undefined) {\r\n            console.error(\"clearSummaryAndResultDisplay(): summaryDisplay or resultDisplay is null or undefined (bleh)\")\r\n            return;\r\n        }\r\n        this.dom.summaryDisplay.innerHTML = \"\"\r\n        this.dom.resultDisplay.innerHTML = \"0\"\r\n\r\n        this.leftAsString = \"\";\r\n        this.left = 0;\r\n        this.rightAsString = \"\";\r\n        this.right = 0;\r\n        this.useLeftForSummary = true;\r\n        this.opPressedCount = 0;\r\n    }\r\n\r\n    private clearResultDisplay(): void {\r\n        if (this.dom.resultDisplay === null ||\r\n            this.dom.resultDisplay === undefined) {\r\n            console.error(\"clearResultDisplay(): resultDisplay is null or undefined (bleh)\")\r\n            return;\r\n        }\r\n        this.dom.resultDisplay.innerHTML = \"0\"\r\n        this.rightAsString = \"\";\r\n        this.right = 0;\r\n    }\r\n\r\n    private performBackspaceOnCurrentEntry(): void {\r\n        if (this.dom.resultDisplay === null ||\r\n            this.dom.resultDisplay === undefined) {\r\n            console.error(\"performBackspaceOnCurrentEntry(): resultDisplay is null or undefined (bleh)\")\r\n            return;\r\n        }\r\n\r\n        if (this.dom.resultDisplay.innerHTML.length === 1) {\r\n            this.dom.resultDisplay.innerHTML = \"0\";\r\n            if (this.useLeftForSummary) {\r\n                this.leftAsString = \"0\";\r\n            }\r\n            else {\r\n                this.rightAsString = \"0\";\r\n            }\r\n            return;\r\n        }\r\n\r\n        let currentResult = this.dom.resultDisplay.innerHTML;\r\n        let backspacedResult = StringUtility.replaceAt(currentResult, \"\", currentResult.length - 1).trim();\r\n        if (this.useLeftForSummary) {\r\n            this.leftAsString = backspacedResult;\r\n        }\r\n        else {\r\n            this.rightAsString = backspacedResult;\r\n        }\r\n        this.dom.resultDisplay.innerHTML = backspacedResult;\r\n    }\r\n\r\n    private initResultToZero(): void {\r\n        if (this.dom.resultDisplay === null ||\r\n            this.dom.resultDisplay === undefined) {\r\n            console.error(\"initResultToZero(): resultDisplay is null or undefined (bleh)\")\r\n            return;\r\n        }\r\n        this.dom.resultDisplay.innerHTML = \"0\";\r\n    }\r\n\r\n    public init() {\r\n        this.cacheDom();\r\n        this.bindEvents();\r\n        this.initResultToZero();\r\n    }\r\n}\r\n\r\n(function () {\r\n    let main = new MainView();\r\n    main.init()\r\n}());"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvdHMvRG9tLnRzIiwic3JjL3RzL09wZXJhdG9yVHlwZS50cyIsInNyYy90cy9PcHMudHMiLCJzcmMvdHMvU3RyaW5nVXRpbGl0eS50cyIsInNyYy90cy9hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0FBO0NBVUM7QUFFRCxrQkFBZSxHQUFHLENBQUM7Ozs7QUNabkIsSUFBWSxZQVdYO0FBWEQsV0FBWSxZQUFZO0lBQ3BCLHlCQUFTLENBQUE7SUFDVCwyQkFBVyxDQUFBO0lBQ1gscUNBQXFCLENBQUE7SUFDckIscUNBQXFCLENBQUE7SUFDckIsaUNBQWlCLENBQUE7SUFDakIsdUNBQXVCLENBQUE7SUFDdkIsK0JBQWUsQ0FBQTtJQUNmLHlDQUF5QixDQUFBO0lBQ3pCLHFDQUFxQixDQUFBO0lBQ3JCLHVDQUF1QixDQUFBO0FBQzNCLENBQUMsRUFYVyxZQUFZLEdBQVosb0JBQVksS0FBWixvQkFBWSxRQVd2Qjs7OztBQ1REO0lBQ0ksR0FBRyxDQUFDLENBQVMsRUFBRSxDQUFTO1FBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBQ0QsUUFBUSxDQUFDLENBQVMsRUFBRSxDQUFTO1FBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBQ0QsUUFBUSxDQUFDLENBQVMsRUFBRSxDQUFTO1FBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBQ0QsTUFBTSxDQUFDLENBQVMsRUFBRSxDQUFTO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUM7WUFBRSxPQUFPLENBQUMsQ0FBQztRQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakIsQ0FBQztJQUNELFNBQVMsQ0FBQyxDQUFTO1FBQ2YsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7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QUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO1FBQ3JELElBQUksZ0JBQWdCLEdBQUcsNkJBQWEsQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLEVBQUUsRUFBRSxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ25HLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3hCLElBQUksQ0FBQyxZQUFZLEdBQUcsZ0JBQWdCLENBQUM7U0FDeEM7YUFDSTtZQUNELElBQUksQ0FBQyxhQUFhLEdBQUcsZ0JBQWdCLENBQUM7U0FDekM7UUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQUM7SUFDeEQsQ0FBQztJQUVPLGdCQUFnQjtRQUNwQixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxLQUFLLElBQUk7WUFDL0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEtBQUssU0FBUyxFQUFFO1lBQ3RDLE9BQU8sQ0FBQyxLQUFLLENBQUMsK0RBQStELENBQUMsQ0FBQTtZQUM5RSxPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDO0lBQzNDLENBQUM7SUFFTSxJQUFJO1FBQ1AsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0NBQ0o7QUFFRCxDQUFDO0lBQ0csSUFBSSxJQUFJLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztJQUMxQixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7QUFDZixDQUFDLEVBQUUsQ0FBQyxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiY2xhc3MgRG9tIHtcclxuICAgIGJ1dHRvbkNvbnRhaW5lcjogSFRNTEVsZW1lbnQgfCBudWxsIHwgdW5kZWZpbmVkO1xyXG4gICAgYWRkQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWQ7XHJcbiAgICBzdWJ0cmFjdEJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsIHwgdW5kZWZpbmVkO1xyXG4gICAgbXVsdGlwbHlCdXR0b246IEhUTUxCdXR0b25FbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZDtcclxuICAgIGRpdmlkZUJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsIHwgdW5kZWZpbmVkO1xyXG4gICAgbmVnYXRlQnV0dG9uOiBIVE1MQnV0dG9uRWxlbWVudCB8IG51bGwgfCB1bmRlZmluZWQ7XHJcbiAgICBlcXVhbEJ1dHRvbjogSFRNTEJ1dHRvbkVsZW1lbnQgfCBudWxsIHwgdW5kZWZpbmVkO1xyXG4gICAgcmVzdWx0RGlzcGxheTogSFRNTEVsZW1lbnQgfCBudWxsIHwgdW5kZWZpbmVkO1xyXG4gICAgc3VtbWFyeURpc3BsYXk6IEhUTUxFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgRG9tO1xyXG4iLCJleHBvcnQgZW51bSBPcGVyYXRvclR5cGUge1xyXG4gICAgTm9uZSA9IFwiXCIsXHJcbiAgICBBZGQgPSBcIkFkZFwiLFxyXG4gICAgU3VidHJhY3QgPSBcIlN1YnRyYWN0XCIsXHJcbiAgICBNdWx0aXBseSA9IFwiTXVsdGlwbHlcIixcclxuICAgIERpdmlkZSA9IFwiRGl2aWRlXCIsXHJcbiAgICBQbHVzTWludXMgPSBcIlBsdXNNaW51c1wiLFxyXG4gICAgRXF1YWwgPSBcIkVxdWFsXCIsXHJcbiAgICBDbGVhckVudHJ5ID0gXCJDbGVhckVudHJ5XCIsXHJcbiAgICBDbGVhckFsbCA9IFwiQ2xlYXJBbGxcIixcclxuICAgIEJhY2tzcGFjZSA9IFwiQmFja3NwYWNlXCJcclxufVxyXG4iLCJpbXBvcnQgeyBJT3BzIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9JT3BzXCI7XHJcblxyXG5jbGFzcyBPcHMgaW1wbGVtZW50cyBJT3BzIHtcclxuICAgIGFkZCh4OiBudW1iZXIsIHk6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHggKyB5O1xyXG4gICAgfVxyXG4gICAgc3VidHJhY3QoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB4IC0geTtcclxuICAgIH1cclxuICAgIG11bHRpcGx5KHg6IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4geCAqIHk7XHJcbiAgICB9XHJcbiAgICBkaXZpZGUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIGlmICh5ID09PSAwKSByZXR1cm4gMDtcclxuICAgICAgICByZXR1cm4geCAvIHk7XHJcbiAgICB9XHJcbiAgICBwbHVzTWludXMoeDogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gKC0xKSAqIHg7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IE9wczsiLCJleHBvcnQgY2xhc3MgU3RyaW5nVXRpbGl0eSB7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlcGxhY2VBdChvcmluZ2FsU3RyaW5nOiBzdHJpbmcsIHJlcGxhY2VtZW50U3RyaW5nOiBzdHJpbmcsIHBvc2l0aW9uOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCBvcmlnQXNBcnJheSA9IG9yaW5nYWxTdHJpbmcuc3BsaXQoXCJcIik7XHJcbiAgICAgICAgb3JpZ0FzQXJyYXlbcG9zaXRpb25dID0gcmVwbGFjZW1lbnRTdHJpbmc7XHJcbiAgICAgICAgbGV0IGZpbmFsU3RyaW5nID0gb3JpZ0FzQXJyYXkuam9pbihcIlwiKTtcclxuICAgICAgICByZXR1cm4gZmluYWxTdHJpbmc7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IE9wcyBmcm9tIFwiLi9PcHNcIjtcclxuaW1wb3J0IERvbSBmcm9tIFwiLi9Eb21cIjtcclxuaW1wb3J0IHsgU3RyaW5nVXRpbGl0eSB9IGZyb20gXCIuL1N0cmluZ1V0aWxpdHlcIjtcclxuaW1wb3J0IHsgT3BlcmF0b3JUeXBlIH0gZnJvbSBcIi4vT3BlcmF0b3JUeXBlXCI7XHJcblxyXG5jbGFzcyBNYWluVmlldyB7XHJcblxyXG4gICAgY2xpY2tFdmVudDogc3RyaW5nID0gXCJjbGlja1wiO1xyXG4gICAgYnV0dG9uQ29udGFpbmVyQ2xhc3NOYW1lOiBzdHJpbmcgPSBcIi5idG4tY29udGFpbmVyXCI7XHJcbiAgICByZXN1bHREaXNwbGF5Q2xhc3NOYW1lOiBzdHJpbmcgPSBcIi5yZXN1bHQtZGlzcGxheVwiO1xyXG4gICAgc3VtbWFyeURpc3BsYXlDbGFzc05hbWU6IHN0cmluZyA9IFwiLnN1bW1hcnktZGlzcGxheVwiO1xyXG5cclxuICAgIGxlZnRBc1N0cmluZzogc3RyaW5nID0gXCJcIjtcclxuICAgIGxlZnQ6IG51bWJlciA9IDA7XHJcbiAgICByaWdodDogbnVtYmVyID0gMDtcclxuICAgIHJpZ2h0QXNTdHJpbmc6IHN0cmluZyA9IFwiXCI7XHJcbiAgICB0b3RhbDogbnVtYmVyID0gMDtcclxuICAgIG9wVHlwZTogT3BlcmF0b3JUeXBlID0gT3BlcmF0b3JUeXBlLk5vbmU7XHJcbiAgICBvcFR5cGVIdG1sOiBzdHJpbmcgPSBcIlwiO1xyXG4gICAgdXNlTGVmdEZvclN1bW1hcnk6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgb3BQcmVzc2VkQ291bnQ6IG51bWJlciA9IDA7XHJcblxyXG4gICAgcHJpdmF0ZSBkb206IERvbSA9IG5ldyBEb20oKTtcclxuICAgIHByaXZhdGUgb3BzOiBPcHMgPSBuZXcgT3BzKCk7XHJcblxyXG4gICAgcHJpdmF0ZSBjYWNoZURvbSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRvbS5idXR0b25Db250YWluZXIgPSA8SFRNTEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLmJ1dHRvbkNvbnRhaW5lckNsYXNzTmFtZSk7XHJcbiAgICAgICAgdGhpcy5kb20uc3VtbWFyeURpc3BsYXkgPSA8SFRNTEVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnN1bW1hcnlEaXNwbGF5Q2xhc3NOYW1lKTtcclxuICAgICAgICB0aGlzLmRvbS5yZXN1bHREaXNwbGF5ID0gPEhUTUxFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5yZXN1bHREaXNwbGF5Q2xhc3NOYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYmluZEV2ZW50cygpIHtcclxuICAgICAgICBpZiAodGhpcy5kb20uYnV0dG9uQ29udGFpbmVyICE9PSBudWxsICYmIHRoaXMuZG9tLmJ1dHRvbkNvbnRhaW5lciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9tLmJ1dHRvbkNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKHRoaXMuY2xpY2tFdmVudCwgdGhpcy5oYW5kbGVCdG5Db250YWluZXJDbGljayk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBoYW5kbGVCdG5Db250YWluZXJDbGljayA9IChldmVudDogRXZlbnQpOiB2b2lkID0+IHtcclxuICAgICAgICAvLyBoYWQgdG8gZG8gdGhlIGV2ZW50IGhhbmRsZXIgdGhpcyB3YXkgaW4gb3JkZXIgdG8gcGFzcyBhbG9uZyB0aGUgY29ycmVjdCAndGhpcydcclxuICAgICAgICAvLyAgY29udGV4dCB0byBpdFxyXG4gICAgICAgIC8vIHNlZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTg0MjM0MTAvdHlwZXNjcmlwdC1yZXRhaW4tc2NvcGUtaW4tZXZlbnQtbGlzdGVuZXJcclxuICAgICAgICBsZXQgc3JjQnV0dG9uID0gPEhUTUxCdXR0b25FbGVtZW50PmV2ZW50LnNyY0VsZW1lbnQ7XHJcbiAgICAgICAgaWYgKHNyY0J1dHRvbiA9PT0gbnVsbCB8fCBzcmNCdXR0b24gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQ2FuJ3QgZmluZCB0aGUgYnV0dG9uIHRoYXQgd2FzIGNsaWNrZWRcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBzcmNCdXR0b25WYWx1ZSA9IHNyY0J1dHRvbi5pbm5lckhUTUw7XHJcbiAgICAgICAgbGV0IGNsZWFyRGF0YTogc3RyaW5nIHwgbnVsbCA9IHNyY0J1dHRvbi5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9wQ2xlYXJcIik7XHJcbiAgICAgICAgaWYgKChzcmNCdXR0b25WYWx1ZSA+PSBcIjBcIiAmJiBzcmNCdXR0b25WYWx1ZSA8PSBcIjlcIikgfHwgc3JjQnV0dG9uVmFsdWUgPT09IFwiLlwiKVxyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZU51bWJlckJ1dHRvblByZXNzZWQoc3JjQnV0dG9uVmFsdWUpO1xyXG4gICAgICAgIGVsc2UgaWYgKGNsZWFyRGF0YSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZUNsZWFyKGNsZWFyRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBnZXQgdGhlIGRhdGEgdGhhdCBrbm93cyB3aGF0IG9wZXJhdG9yIGJ1dHRvbiB3YXMgcHJlc3NlZCBcclxuICAgICAgICAgICAgdGhpcy5vcFR5cGVIdG1sID0gc3JjQnV0dG9uVmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlT3BlcmF0b3JCdXR0b25QcmVzc2VkKHNyY0J1dHRvbi5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9wVHlwZVwiKSwgc3JjQnV0dG9uVmFsdWUpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBoYW5kbGVPcGVyYXRvckJ1dHRvblByZXNzZWQob3BQcmVzc2VkOiBzdHJpbmcgfCBudWxsLCBodG1sQ29udGVudE9mT3A6IHN0cmluZyk6IHZvaWQge1xyXG5cclxuICAgICAgICB0aGlzLm9wUHJlc3NlZENvdW50Kys7XHJcblxyXG4gICAgICAgIGlmIChvcFByZXNzZWQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIk9wZXJhdGlvbiBzZWxlY3RlZCBpcyBudWxsXCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKG9wUHJlc3NlZCA9PT0gT3BlcmF0b3JUeXBlLkVxdWFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcHV0ZVRvdGFsKCk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmlld1BpcGVsaW5lKHRydWUsIGh0bWxDb250ZW50T2ZPcCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsc2UgaWYgKG9wUHJlc3NlZCA9PSBPcGVyYXRvclR5cGUuUGx1c01pbnVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3BQcmVzc2VkQ291bnQtLTtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVQbHVzTWludXNDYXNlKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMub3BUeXBlID09PSBPcGVyYXRvclR5cGUuTm9uZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9wVHlwZSA9IDxPcGVyYXRvclR5cGU+b3BQcmVzc2VkO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN1bW1hcnlEaXNwbGF5KGh0bWxDb250ZW50T2ZPcCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNvbXB1dGVUb3RhbCgpO1xyXG4gICAgICAgICAgICB0aGlzLm9wVHlwZSA9IDxPcGVyYXRvclR5cGU+b3BQcmVzc2VkO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZpZXdQaXBlbGluZShmYWxzZSwgaHRtbENvbnRlbnRPZk9wKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZVZpZXdQaXBlbGluZShjYW5DbGVhclN1bW1hcnlEaXNwbGF5OiBib29sZWFuLCBodG1sQ29udGVudE9mT3A6IHN0cmluZykge1xyXG4gICAgICAgIGlmIChjYW5DbGVhclN1bW1hcnlEaXNwbGF5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXJTdW1tYXJ5RGlzcGxheSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVTdW1tYXJ5RGlzcGxheShodG1sQ29udGVudE9mT3ApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVMZWZ0QW5kUmlnaHRWYWx1ZXMoKTtcclxuICAgICAgICB0aGlzLmRpc3BsYXlSZXN1bHQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGhhbmRsZVBsdXNNaW51c0Nhc2UoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuZG9tLnJlc3VsdERpc3BsYXkgPT09IG51bGwgfHwgdGhpcy5kb20ucmVzdWx0RGlzcGxheSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJoYW5kbGVQbHVzTWludXNDYXNlKCk6IFVuYWJsZSB0byBmaW5kIHJlc3VsdHMgZGlzcGxheVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGN1cnJlbnREaXNwbGF5ID0gdGhpcy5kb20ucmVzdWx0RGlzcGxheS5pbm5lckhUTUw7XHJcbiAgICAgICAgbGV0IGNvbnZlcnRlZFRvTnVtYmVyID0gTnVtYmVyKGN1cnJlbnREaXNwbGF5KVxyXG4gICAgICAgIGxldCBwbVJlc3VsdCA9IHRoaXMub3BzLnBsdXNNaW51cyhjb252ZXJ0ZWRUb051bWJlcik7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnVzZUxlZnRGb3JTdW1tYXJ5KSB7XHJcbiAgICAgICAgICAgIHRoaXMubGVmdEFzU3RyaW5nID0gcG1SZXN1bHQudG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucmlnaHRBc1N0cmluZyA9IHBtUmVzdWx0LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmRvbS5yZXN1bHREaXNwbGF5LmlubmVySFRNTCA9IHBtUmVzdWx0LnRvU3RyaW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb21wdXRlVG90YWwoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5sZWZ0ID0gTnVtYmVyKHRoaXMubGVmdEFzU3RyaW5nKTtcclxuICAgICAgICB0aGlzLnJpZ2h0ID0gTnVtYmVyKHRoaXMucmlnaHRBc1N0cmluZyk7XHJcblxyXG4gICAgICAgIHN3aXRjaCAodGhpcy5vcFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAoT3BlcmF0b3JUeXBlLk5vbmUpOiB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIChPcGVyYXRvclR5cGUuQWRkKToge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbCA9IHRoaXMub3BzLmFkZCh0aGlzLmxlZnQsIHRoaXMucmlnaHQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAoT3BlcmF0b3JUeXBlLlN1YnRyYWN0KToge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbCA9IHRoaXMub3BzLnN1YnRyYWN0KHRoaXMubGVmdCwgdGhpcy5yaWdodCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIChPcGVyYXRvclR5cGUuTXVsdGlwbHkpOiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvdGFsID0gdGhpcy5vcHMubXVsdGlwbHkodGhpcy5sZWZ0LCB0aGlzLnJpZ2h0KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgKE9wZXJhdG9yVHlwZS5EaXZpZGUpOiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvdGFsID0gdGhpcy5vcHMuZGl2aWRlKHRoaXMubGVmdCwgdGhpcy5yaWdodCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYE9wZXJhdG9yICR7dGhpcy5vcFR5cGV9IGlzIG5vdCBkZWZpbmVkYCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRpc3BsYXlSZXN1bHQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuZG9tLnJlc3VsdERpc3BsYXkgIT09IG51bGwgJiYgdGhpcy5kb20ucmVzdWx0RGlzcGxheSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9tLnJlc3VsdERpc3BsYXkudGV4dENvbnRlbnQgPSBgJHt0aGlzLnRvdGFsfWA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZGlzcGxheUxlZnQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuZG9tLnJlc3VsdERpc3BsYXkgIT09IG51bGwgJiYgdGhpcy5kb20ucmVzdWx0RGlzcGxheSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9tLnJlc3VsdERpc3BsYXkudGV4dENvbnRlbnQgPSB0aGlzLmxlZnRBc1N0cmluZztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBkaXNwbGF5UmlnaHQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuZG9tLnJlc3VsdERpc3BsYXkgIT09IG51bGwgJiYgdGhpcy5kb20ucmVzdWx0RGlzcGxheSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9tLnJlc3VsdERpc3BsYXkudGV4dENvbnRlbnQgPSB0aGlzLnJpZ2h0QXNTdHJpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2xlYXJTdW1tYXJ5RGlzcGxheSgpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZG9tLnN1bW1hcnlEaXNwbGF5ID09PSBudWxsIHx8IHRoaXMuZG9tLnN1bW1hcnlEaXNwbGF5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJjaGVja1N1bW1hcnlEaXNwbGF5Rm9yTnVsbE9yVW5kZWZpbmVkKCk6IFN1bW1hcnkgZGlzcGxheSBpcyBudWxsIG9yIHVuZGVmaW5lZFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9tLnN1bW1hcnlEaXNwbGF5LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHRoaXMudXNlTGVmdEZvclN1bW1hcnkgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLm9wUHJlc3NlZENvdW50ID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVTdW1tYXJ5RGlzcGxheShvcFByZXNzZWRIdG1sOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5kb20uc3VtbWFyeURpc3BsYXkgPT09IG51bGwgfHwgdGhpcy5kb20uc3VtbWFyeURpc3BsYXkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiVW5hYmxlIHRvIHBvcHVsYXRlIHN1bW1hcnkgdmFsdWVcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9wUHJlc3NlZENvdW50ID4gMSkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcnRpYWxTdW1tYXJ5RGlzcGxheVVwZGF0ZShvcFByZXNzZWRIdG1sKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMudXNlTGVmdEZvclN1bW1hcnkpIHtcclxuICAgICAgICAgICAgdGhpcy5mdWxsTGVmdFN1bW1hcnlEaXNwbGF5VXBkYXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMudXNlTGVmdEZvclN1bW1hcnkgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZnVsbFJpZ2h0U3VtbWFyeURpc3BsYXlVcGRhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmdWxsTGVmdFN1bW1hcnlEaXNwbGF5VXBkYXRlKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmRvbS5zdW1tYXJ5RGlzcGxheSA9PT0gbnVsbCB8fCB0aGlzLmRvbS5zdW1tYXJ5RGlzcGxheSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJmdWxsU3VtbWFyeURpc3BsYXlVcGRhdGUoKTogVW5hYmxlIHRvIGRvIGEgZnVsbCBzdW1tYXJ5IGRpc3BsYXkgdXBkYXRlXCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZG9tLnN1bW1hcnlEaXNwbGF5LmlubmVySFRNTCArPSB0aGlzLmxlZnRBc1N0cmluZyArIFwiIFwiICsgdGhpcy5vcFR5cGVIdG1sICsgXCIgXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBmdWxsUmlnaHRTdW1tYXJ5RGlzcGxheVVwZGF0ZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5kb20uc3VtbWFyeURpc3BsYXkgPT09IG51bGwgfHwgdGhpcy5kb20uc3VtbWFyeURpc3BsYXkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiZnVsbFN1bW1hcnlEaXNwbGF5VXBkYXRlKCk6IFVuYWJsZSB0byBkbyBhIGZ1bGwgc3VtbWFyeSBkaXNwbGF5IHVwZGF0ZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRvbS5zdW1tYXJ5RGlzcGxheS5pbm5lckhUTUwgKz0gdGhpcy5yaWdodEFzU3RyaW5nICsgXCIgXCIgKyB0aGlzLm9wVHlwZUh0bWwgKyBcIiBcIjtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHBhcnRpYWxTdW1tYXJ5RGlzcGxheVVwZGF0ZShvcFByZXNzZWRIdG1sOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5kb20uc3VtbWFyeURpc3BsYXkgPT09IG51bGwgfHwgdGhpcy5kb20uc3VtbWFyeURpc3BsYXkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwicGFydGlhbFN1bW1hcnlEaXNwbGF5VXBkYXRlKCk6IFVuYWJsZSB0byBkbyBhIHBhcnRpYWwgc3VtbWFyeSBkaXNwbGF5IHVwZGF0ZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgcmVwbGFjZWQgPSB0aGlzLnJlcGxhY2VMYXN0RGlzcGxheWVkT3BlcmF0b3JXaXRoQ3VycmVudE9uZSh0aGlzLmRvbS5zdW1tYXJ5RGlzcGxheS5pbm5lckhUTUwsIG9wUHJlc3NlZEh0bWwpO1xyXG4gICAgICAgIHRoaXMuZG9tLnN1bW1hcnlEaXNwbGF5LmlubmVySFRNTCA9IHJlcGxhY2VkO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVwbGFjZUxhc3REaXNwbGF5ZWRPcGVyYXRvcldpdGhDdXJyZW50T25lKHZhbHVlVG9Nb2RpZnk6IHN0cmluZywgcmVwbGFjZW1lbnRWYWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgY3VycmVudERpc3BsYXkgPSBTdHJpbmdVdGlsaXR5LnJlcGxhY2VBdCh2YWx1ZVRvTW9kaWZ5LCByZXBsYWNlbWVudFZhbHVlLCB2YWx1ZVRvTW9kaWZ5Lmxlbmd0aCAtIDIpO1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50RGlzcGxheTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZUxlZnRBbmRSaWdodFZhbHVlcygpIHtcclxuICAgICAgICB0aGlzLmxlZnRBc1N0cmluZyA9IHRoaXMudG90YWwudG9TdHJpbmcoKTtcclxuICAgICAgICB0aGlzLmxlZnQgPSB0aGlzLnRvdGFsO1xyXG4gICAgICAgIHRoaXMucmlnaHRBc1N0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5yaWdodCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBoYW5kbGVOdW1iZXJCdXR0b25QcmVzc2VkKHByZXNzZWROdW1iZXI6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMub3BQcmVzc2VkQ291bnQgPSAwO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5sZWZ0QXNTdHJpbmcgPT09IFwiXCIgfHwgdGhpcy5vcFR5cGUgPT09IE9wZXJhdG9yVHlwZS5Ob25lKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGVmdEFzU3RyaW5nICs9IHByZXNzZWROdW1iZXI7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheUxlZnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucmlnaHRBc1N0cmluZyArPSBwcmVzc2VkTnVtYmVyO1xyXG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlSaWdodCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaGFuZGxlQ2xlYXIoY2xlYXJEYXRhOiBzdHJpbmcgfCBudWxsKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGNsZWFyRGF0YSA9PT0gPE9wZXJhdG9yVHlwZT5PcGVyYXRvclR5cGUuQ2xlYXJBbGwpIHtcclxuICAgICAgICAgICAgdGhpcy5jbGVhclN1bW1hcnlBbmRSZXN1bHREaXNwbGF5KCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNsZWFyRGF0YSA9PT0gPE9wZXJhdG9yVHlwZT5PcGVyYXRvclR5cGUuQ2xlYXJFbnRyeSkge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyUmVzdWx0RGlzcGxheSgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjbGVhckRhdGEgPT09IDxPcGVyYXRvclR5cGU+T3BlcmF0b3JUeXBlLkJhY2tzcGFjZSkge1xyXG4gICAgICAgICAgICB0aGlzLnBlcmZvcm1CYWNrc3BhY2VPbkN1cnJlbnRFbnRyeSgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2xlYXJTdW1tYXJ5QW5kUmVzdWx0RGlzcGxheSgpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZG9tLnN1bW1hcnlEaXNwbGF5ID09PSBudWxsIHx8XHJcbiAgICAgICAgICAgIHRoaXMuZG9tLnN1bW1hcnlEaXNwbGF5ID09PSB1bmRlZmluZWQgfHxcclxuICAgICAgICAgICAgdGhpcy5kb20ucmVzdWx0RGlzcGxheSA9PT0gbnVsbCB8fFxyXG4gICAgICAgICAgICB0aGlzLmRvbS5yZXN1bHREaXNwbGF5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcImNsZWFyU3VtbWFyeUFuZFJlc3VsdERpc3BsYXkoKTogc3VtbWFyeURpc3BsYXkgb3IgcmVzdWx0RGlzcGxheSBpcyBudWxsIG9yIHVuZGVmaW5lZCAoYmxlaClcIilcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRvbS5zdW1tYXJ5RGlzcGxheS5pbm5lckhUTUwgPSBcIlwiXHJcbiAgICAgICAgdGhpcy5kb20ucmVzdWx0RGlzcGxheS5pbm5lckhUTUwgPSBcIjBcIlxyXG5cclxuICAgICAgICB0aGlzLmxlZnRBc1N0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5sZWZ0ID0gMDtcclxuICAgICAgICB0aGlzLnJpZ2h0QXNTdHJpbmcgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMucmlnaHQgPSAwO1xyXG4gICAgICAgIHRoaXMudXNlTGVmdEZvclN1bW1hcnkgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMub3BQcmVzc2VkQ291bnQgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2xlYXJSZXN1bHREaXNwbGF5KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmRvbS5yZXN1bHREaXNwbGF5ID09PSBudWxsIHx8XHJcbiAgICAgICAgICAgIHRoaXMuZG9tLnJlc3VsdERpc3BsYXkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiY2xlYXJSZXN1bHREaXNwbGF5KCk6IHJlc3VsdERpc3BsYXkgaXMgbnVsbCBvciB1bmRlZmluZWQgKGJsZWgpXCIpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kb20ucmVzdWx0RGlzcGxheS5pbm5lckhUTUwgPSBcIjBcIlxyXG4gICAgICAgIHRoaXMucmlnaHRBc1N0cmluZyA9IFwiXCI7XHJcbiAgICAgICAgdGhpcy5yaWdodCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwZXJmb3JtQmFja3NwYWNlT25DdXJyZW50RW50cnkoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuZG9tLnJlc3VsdERpc3BsYXkgPT09IG51bGwgfHxcclxuICAgICAgICAgICAgdGhpcy5kb20ucmVzdWx0RGlzcGxheSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJwZXJmb3JtQmFja3NwYWNlT25DdXJyZW50RW50cnkoKTogcmVzdWx0RGlzcGxheSBpcyBudWxsIG9yIHVuZGVmaW5lZCAoYmxlaClcIilcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZG9tLnJlc3VsdERpc3BsYXkuaW5uZXJIVE1MLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmRvbS5yZXN1bHREaXNwbGF5LmlubmVySFRNTCA9IFwiMFwiO1xyXG4gICAgICAgICAgICBpZiAodGhpcy51c2VMZWZ0Rm9yU3VtbWFyeSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sZWZ0QXNTdHJpbmcgPSBcIjBcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmlnaHRBc1N0cmluZyA9IFwiMFwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBjdXJyZW50UmVzdWx0ID0gdGhpcy5kb20ucmVzdWx0RGlzcGxheS5pbm5lckhUTUw7XHJcbiAgICAgICAgbGV0IGJhY2tzcGFjZWRSZXN1bHQgPSBTdHJpbmdVdGlsaXR5LnJlcGxhY2VBdChjdXJyZW50UmVzdWx0LCBcIlwiLCBjdXJyZW50UmVzdWx0Lmxlbmd0aCAtIDEpLnRyaW0oKTtcclxuICAgICAgICBpZiAodGhpcy51c2VMZWZ0Rm9yU3VtbWFyeSkge1xyXG4gICAgICAgICAgICB0aGlzLmxlZnRBc1N0cmluZyA9IGJhY2tzcGFjZWRSZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnJpZ2h0QXNTdHJpbmcgPSBiYWNrc3BhY2VkUmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRvbS5yZXN1bHREaXNwbGF5LmlubmVySFRNTCA9IGJhY2tzcGFjZWRSZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0UmVzdWx0VG9aZXJvKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmRvbS5yZXN1bHREaXNwbGF5ID09PSBudWxsIHx8XHJcbiAgICAgICAgICAgIHRoaXMuZG9tLnJlc3VsdERpc3BsYXkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiaW5pdFJlc3VsdFRvWmVybygpOiByZXN1bHREaXNwbGF5IGlzIG51bGwgb3IgdW5kZWZpbmVkIChibGVoKVwiKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZG9tLnJlc3VsdERpc3BsYXkuaW5uZXJIVE1MID0gXCIwXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5jYWNoZURvbSgpO1xyXG4gICAgICAgIHRoaXMuYmluZEV2ZW50cygpO1xyXG4gICAgICAgIHRoaXMuaW5pdFJlc3VsdFRvWmVybygpO1xyXG4gICAgfVxyXG59XHJcblxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgbGV0IG1haW4gPSBuZXcgTWFpblZpZXcoKTtcclxuICAgIG1haW4uaW5pdCgpXHJcbn0oKSk7Il19"}