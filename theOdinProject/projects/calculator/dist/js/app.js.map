{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/ts/Dom.ts","src/ts/Effects.ts","src/ts/OperatorType.ts","src/ts/Ops.ts","src/ts/StringUtility.ts","src/ts/app.ts"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","class Dom {\r\n    revealEffectContainer: HTMLElement | null | undefined;\r\n    buttonContainer: HTMLElement | null | undefined;\r\n    buttonContainers: NodeList | null | undefined;\r\n    resultDisplay: HTMLElement | null | undefined;\r\n    summaryDisplay: HTMLElement | null | undefined;\r\n}\r\n\r\nexport default Dom;\r\n","class Effect {\r\n    static reveal(element: HTMLElement, gradientBackground: string): void {\r\n        element.style.backgroundImage = gradientBackground;\r\n    }\r\n\r\n    static updateGradient(leftPositionX: number, topPositionY: number): string {\r\n        // let gradient = `radial-gradient(circle 50px at ${leftPositionX}px ${topPositionY}px, rgba(255,255,255,0.3), rgba(255,255,255,0)), radial-gradient(circle ${70}px at ${leftPositionX}px ${topPositionY}px, rgba(255,255,255,0), rgba(255,255,255,0.3), rgba(255,255,255,0), rgba(255,255,255,0))`;\r\n        let gradient = `radial-gradient(circle 50px at ${leftPositionX}px ${topPositionY}px, rgba(255,255,255,0.3), rgba(255,255,255,0))`;\r\n        return gradient;\r\n    }\r\n\r\n}\r\n\r\nexport default Effect;","export enum OperatorType {\r\n    None = \"\",\r\n    Add = \"Add\",\r\n    Subtract = \"Subtract\",\r\n    Multiply = \"Multiply\",\r\n    Divide = \"Divide\",\r\n    PlusMinus = \"PlusMinus\",\r\n    Equal = \"Equal\",\r\n    ClearEntry = \"ClearEntry\",\r\n    ClearAll = \"ClearAll\",\r\n    Backspace = \"Backspace\"\r\n}\r\n","import { IOps } from \"./interfaces/IOps\";\r\n\r\nclass Ops implements IOps {\r\n    add(x: number, y: number): number {\r\n        return x + y;\r\n    }\r\n    subtract(x: number, y: number): number {\r\n        return x - y;\r\n    }\r\n    multiply(x: number, y: number): number {\r\n        return x * y;\r\n    }\r\n    divide(x: number, y: number): number {\r\n        if (y === 0) return 0;\r\n        return x / y;\r\n    }\r\n    plusMinus(x: number): number {\r\n        return (-1) * x;\r\n    }\r\n}\r\n\r\nexport default Ops;","export class StringUtility {\r\n    public static replaceAt(oringalString: string, replacementString: string, position: number): string {\r\n        let origAsArray = oringalString.split(\"\");\r\n        origAsArray[position] = replacementString;\r\n        let finalString = origAsArray.join(\"\");\r\n        return finalString;\r\n    }\r\n}\r\n","import Ops from \"./Ops\";\r\nimport Dom from \"./Dom\";\r\nimport { StringUtility } from \"./StringUtility\";\r\nimport { OperatorType } from \"./OperatorType\";\r\nimport Effect from \"./Effects\";\r\n\r\nconst MaxDisplayLength: number = 13;\r\n\r\nclass MainView {\r\n\r\n    clickEvent: string = \"click\";\r\n    mouseMoveEvent: string = \"mousemove\";\r\n    revealEffectContainerClassName: string = \".outer-wrapper\";\r\n    buttonContainerClassName: string = \".btn-container\";\r\n    resultDisplayClassName: string = \".result-display\";\r\n    summaryDisplayClassName: string = \".summary-display\";\r\n\r\n    leftAsString: string = \"\";\r\n    left: number = 0;\r\n    right: number = 0;\r\n    rightAsString: string = \"\";\r\n    total: number = 0;\r\n    opType: OperatorType = OperatorType.None;\r\n    opTypeHtml: string = \"\";\r\n    useLeftForSummary: boolean = true;\r\n    opPressedCount: number = 0;\r\n\r\n    private dom: Dom = new Dom();\r\n    private ops: Ops = new Ops();\r\n\r\n    private cacheDom(): void {\r\n        this.dom.revealEffectContainer = <HTMLElement>document.querySelector(this.revealEffectContainerClassName);\r\n        this.dom.buttonContainer = <HTMLElement>document.querySelector(this.buttonContainerClassName);\r\n        this.dom.buttonContainers = <NodeList>document.querySelectorAll(this.buttonContainerClassName);\r\n        this.dom.summaryDisplay = <HTMLElement>document.querySelector(this.summaryDisplayClassName);\r\n        this.dom.resultDisplay = <HTMLElement>document.querySelector(this.resultDisplayClassName);\r\n    }\r\n\r\n    public bindEvents() {\r\n        if (this.dom.revealEffectContainer !== null && this.dom.revealEffectContainer !== undefined) {\r\n            this.dom.revealEffectContainer.addEventListener(this.mouseMoveEvent, this.handleRevalContainerMouseMove);\r\n        }\r\n\r\n        if (this.dom.buttonContainer !== null && this.dom.buttonContainer !== undefined) {\r\n            this.dom.buttonContainer.addEventListener(this.clickEvent, this.handleBtnContainerClick);\r\n        }\r\n    }\r\n\r\n    public handleRevalContainerMouseMove = (event: Event): void => {\r\n        if (this.dom.buttonContainer === null ||\r\n            this.dom.buttonContainer === undefined) {\r\n            return;\r\n        }\r\n\r\n        let bcr = this.dom.buttonContainer.getBoundingClientRect();\r\n\r\n        console.log(`bcRect:${bcr.left}-${bcr.top}, cx:${(<MouseEvent>event).clientX}, cy:${(<MouseEvent>event).clientY}`);\r\n\r\n        Effect.reveal(this.dom.buttonContainer, Effect.updateGradient((<MouseEvent>event).clientX - bcr.left, (<MouseEvent>event).clientY - bcr.top));\r\n\r\n\r\n        // let children = this.dom.buttonContainer.children;\r\n\r\n        // if (children.length <= 0) return;\r\n\r\n        // for (let i = 0; i < children.length; i++) {\r\n        //     const bc = children[i];\r\n\r\n        //     let clientRect = bc.getBoundingClientRect();\r\n        //     let top = clientRect.top + document.body.scrollTop;\r\n        //     let left = clientRect.left + document.body.scrollLeft;\r\n        //     let x = (<MouseEvent>event).clientX - left;\r\n        //     let y = (<MouseEvent>event).clientY - top;\r\n\r\n        //     // console.log(`left: ${left}, top: ${top}, x:${x}, y:${y}, cRL:${(<MouseEvent>event).clientX}, cRT:${(<MouseEvent>event).clientY}, cx:${(<MouseEvent>event).clientX}, cy:${(<MouseEvent>event).clientY}`);\r\n        //     console.log(`${(<MouseEvent>event).clientX + x}, ${(<MouseEvent>event).clientX + y}`);\r\n\r\n        //     Effect.reveal(this.dom.buttonContainer, Effect.updateGradient((<MouseEvent>event).clientX + x, (<MouseEvent>event).clientY) + y);\r\n        // }\r\n    }\r\n\r\n    public handleBtnContainerClick = (event: Event): void => {\r\n        // had to do the event handler this way in order to pass along the correct 'this'\r\n        //  context to it\r\n        // see: https://stackoverflow.com/questions/18423410/typescript-retain-scope-in-event-listener\r\n        let srcButton = <HTMLButtonElement>event.srcElement;\r\n        if (srcButton === null || srcButton === undefined) {\r\n            console.error(\"Can't find the button that was clicked\");\r\n            return;\r\n        }\r\n\r\n        let srcButtonValue = srcButton.innerHTML;\r\n        let clearData: string | null = srcButton.getAttribute(\"data-opClear\");\r\n        if ((srcButtonValue >= \"0\" && srcButtonValue <= \"9\") || srcButtonValue === \".\")\r\n            this.handleNumberButtonPressed(srcButtonValue);\r\n        else if (clearData !== null) {\r\n            this.handleClear(clearData);\r\n        }\r\n        else {\r\n            // get the data that knows what operator button was pressed \r\n            this.opTypeHtml = srcButtonValue;\r\n            this.handleOperatorButtonPressed(srcButton.getAttribute(\"data-opType\"), srcButtonValue);\r\n        };\r\n    }\r\n\r\n    private handleOperatorButtonPressed(opPressed: string | null, htmlContentOfOp: string): void {\r\n\r\n        this.opPressedCount++;\r\n\r\n        if (opPressed === null) {\r\n            console.error(\"Operation selected is null\");\r\n            return;\r\n        }\r\n        else if (opPressed === OperatorType.Equal) {\r\n            this.computeTotal();\r\n            this.useLeftForSummary = true;\r\n            this.updateViewPipeline(true, htmlContentOfOp);\r\n            return;\r\n        }\r\n\r\n        else if (opPressed == OperatorType.PlusMinus) {\r\n            this.opPressedCount--;\r\n            this.handlePlusMinusCase();\r\n            return;\r\n        }\r\n\r\n        else if (this.opType === OperatorType.None) {\r\n            this.opType = <OperatorType>opPressed;\r\n            this.updateSummaryDisplay(htmlContentOfOp);\r\n            return;\r\n        }\r\n\r\n        else {\r\n            this.computeTotal();\r\n            this.opType = <OperatorType>opPressed;\r\n            this.updateViewPipeline(false, htmlContentOfOp);\r\n            return;\r\n        }\r\n    }\r\n\r\n    private updateViewPipeline(canClearSummaryDisplay: boolean, htmlContentOfOp: string) {\r\n        if (canClearSummaryDisplay) {\r\n            this.clearSummaryDisplay();\r\n        }\r\n        else {\r\n            this.updateSummaryDisplay(htmlContentOfOp);\r\n        }\r\n\r\n        this.updateLeftAndRightValues();\r\n        this.displayResult();\r\n    }\r\n\r\n    private handlePlusMinusCase(): void {\r\n        if (this.dom.resultDisplay === null || this.dom.resultDisplay === undefined) {\r\n            console.error(\"handlePlusMinusCase(): Unable to find results display\");\r\n            return;\r\n        }\r\n\r\n        let currentDisplay = this.dom.resultDisplay.innerHTML;\r\n        let convertedToNumber = Number(currentDisplay)\r\n        let pmResult = this.ops.plusMinus(convertedToNumber);\r\n\r\n        if (this.useLeftForSummary) {\r\n            this.leftAsString = pmResult.toString();\r\n        }\r\n        else {\r\n            this.rightAsString = pmResult.toString();\r\n        }\r\n\r\n        this.dom.resultDisplay.innerHTML = pmResult.toString();\r\n    }\r\n\r\n    private computeTotal(): void {\r\n        this.left = Number(this.leftAsString);\r\n        this.right = Number(this.rightAsString);\r\n\r\n        if (this.left === 0 && this.right === 0) return;\r\n\r\n        switch (this.opType) {\r\n            case (OperatorType.None): {\r\n                break;\r\n            }\r\n            case (OperatorType.Add): {\r\n                this.total = this.ops.add(this.left, this.right);\r\n                break;\r\n            }\r\n            case (OperatorType.Subtract): {\r\n                this.total = this.ops.subtract(this.left, this.right);\r\n                break;\r\n            }\r\n            case (OperatorType.Multiply): {\r\n                this.total = this.ops.multiply(this.left, this.right);\r\n                break;\r\n            }\r\n            case (OperatorType.Divide): {\r\n                this.total = this.ops.divide(this.left, this.right);\r\n                break;\r\n            }\r\n\r\n            default: {\r\n                console.log(`Operator ${this.opType} is not defined`);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private trimmedDisplay(stringToTrim: string, noOfPlacesToKeep: number) {\r\n        return stringToTrim.substr(0, noOfPlacesToKeep);\r\n    }\r\n\r\n    private displayResult(): void {\r\n        if (this.dom.resultDisplay !== null && this.dom.resultDisplay !== undefined) {\r\n            this.dom.resultDisplay.textContent = this.trimmedDisplay(`${this.total}`, MaxDisplayLength);\r\n        }\r\n    }\r\n\r\n    private displayLeft(): void {\r\n        if (this.dom.resultDisplay !== null && this.dom.resultDisplay !== undefined) {\r\n            this.dom.resultDisplay.textContent = this.trimmedDisplay(this.leftAsString, MaxDisplayLength);\r\n        }\r\n    }\r\n\r\n    private displayRight(): void {\r\n        if (this.dom.resultDisplay !== null && this.dom.resultDisplay !== undefined) {\r\n            this.dom.resultDisplay.textContent = this.trimmedDisplay(this.rightAsString, MaxDisplayLength);\r\n        }\r\n    }\r\n\r\n    private clearSummaryDisplay(): void {\r\n\r\n        if (this.dom.summaryDisplay === null || this.dom.summaryDisplay === undefined) {\r\n            console.log(\"checkSummaryDisplayForNullOrUndefined(): Summary display is null or undefined\");\r\n            return;\r\n        }\r\n\r\n        else {\r\n            this.dom.summaryDisplay.innerHTML = \"\";\r\n            this.useLeftForSummary = true;\r\n            this.opPressedCount = 0;\r\n        }\r\n    }\r\n\r\n    private updateSummaryDisplay(opPressedHtml: string): void {\r\n        if (this.dom.summaryDisplay === null || this.dom.summaryDisplay === undefined) {\r\n            console.error(\"Unable to populate summary value\");\r\n            return;\r\n        }\r\n\r\n        if (this.opPressedCount > 1) {\r\n            this.partialSummaryDisplayUpdate(opPressedHtml);\r\n            return;\r\n        }\r\n\r\n        if (this.useLeftForSummary) {\r\n            this.fullLeftSummaryDisplayUpdate();\r\n            this.useLeftForSummary = false;\r\n        }\r\n        else {\r\n            this.fullRightSummaryDisplayUpdate();\r\n        }\r\n    }\r\n\r\n    private fullLeftSummaryDisplayUpdate(): void {\r\n        if (this.dom.summaryDisplay === null || this.dom.summaryDisplay === undefined) {\r\n            console.error(\"fullSummaryDisplayUpdate(): Unable to do a full summary display update\");\r\n            return;\r\n        }\r\n        this.dom.summaryDisplay.innerHTML += this.leftAsString + \" \" + this.opTypeHtml + \" \";\r\n    }\r\n\r\n    private fullRightSummaryDisplayUpdate(): void {\r\n        if (this.dom.summaryDisplay === null || this.dom.summaryDisplay === undefined) {\r\n            console.error(\"fullSummaryDisplayUpdate(): Unable to do a full summary display update\");\r\n            return;\r\n        }\r\n        this.dom.summaryDisplay.innerHTML += this.rightAsString + \" \" + this.opTypeHtml + \" \";\r\n    }\r\n\r\n    private partialSummaryDisplayUpdate(opPressedHtml: string): void {\r\n        if (this.dom.summaryDisplay === null || this.dom.summaryDisplay === undefined) {\r\n            console.error(\"partialSummaryDisplayUpdate(): Unable to do a partial summary display update\");\r\n            return;\r\n        }\r\n        let replaced = this.replaceLastDisplayedOperatorWithCurrentOne(this.dom.summaryDisplay.innerHTML, opPressedHtml);\r\n        this.dom.summaryDisplay.innerHTML = replaced;\r\n    }\r\n\r\n    private replaceLastDisplayedOperatorWithCurrentOne(valueToModify: string, replacementValue: string): string {\r\n        let currentDisplay = StringUtility.replaceAt(valueToModify, replacementValue, valueToModify.length - 2);\r\n        return currentDisplay;\r\n    }\r\n\r\n    private updateLeftAndRightValues() {\r\n        this.leftAsString = this.total.toString();\r\n        this.left = this.total;\r\n        this.rightAsString = \"\";\r\n        this.right = 0;\r\n        this.opPressedCount = 0;\r\n    }\r\n\r\n    private handleNumberButtonPressed(pressedNumber: string): void {\r\n        this.opPressedCount = 0;\r\n\r\n        if (this.leftAsString === \"\" || this.opType === OperatorType.None) {\r\n            this.leftAsString += pressedNumber;\r\n            this.displayLeft();\r\n        }\r\n        else {\r\n            this.rightAsString += pressedNumber;\r\n            this.displayRight();\r\n        }\r\n    }\r\n\r\n    public handleClear(clearData: string | null): void {\r\n        if (clearData === <OperatorType>OperatorType.ClearAll) {\r\n            this.clearSummaryAndResultDisplay();\r\n            return;\r\n        }\r\n        if (clearData === <OperatorType>OperatorType.ClearEntry) {\r\n            this.clearResultDisplay();\r\n            return;\r\n        }\r\n        if (clearData === <OperatorType>OperatorType.Backspace) {\r\n            this.performBackspaceOnCurrentEntry();\r\n            return;\r\n        }\r\n    }\r\n\r\n    private clearSummaryAndResultDisplay(): void {\r\n\r\n        if (this.dom.summaryDisplay === null ||\r\n            this.dom.summaryDisplay === undefined ||\r\n            this.dom.resultDisplay === null ||\r\n            this.dom.resultDisplay === undefined) {\r\n            console.error(\"clearSummaryAndResultDisplay(): summaryDisplay or resultDisplay is null or undefined (bleh)\")\r\n            return;\r\n        }\r\n        this.dom.summaryDisplay.innerHTML = \"\"\r\n        this.dom.resultDisplay.innerHTML = \"0\"\r\n\r\n        this.leftAsString = \"\";\r\n        this.left = 0;\r\n        this.rightAsString = \"\";\r\n        this.right = 0;\r\n        this.useLeftForSummary = true;\r\n        this.opPressedCount = 0;\r\n    }\r\n\r\n    private clearResultDisplay(): void {\r\n        if (this.dom.resultDisplay === null ||\r\n            this.dom.resultDisplay === undefined) {\r\n            console.error(\"clearResultDisplay(): resultDisplay is null or undefined (bleh)\")\r\n            return;\r\n        }\r\n        this.dom.resultDisplay.innerHTML = \"0\"\r\n        this.rightAsString = \"\";\r\n        this.right = 0;\r\n    }\r\n\r\n    private performBackspaceOnCurrentEntry(): void {\r\n        if (this.dom.resultDisplay === null ||\r\n            this.dom.resultDisplay === undefined) {\r\n            console.error(\"performBackspaceOnCurrentEntry(): resultDisplay is null or undefined (bleh)\")\r\n            return;\r\n        }\r\n\r\n        if (this.dom.resultDisplay.innerHTML.length === 1) {\r\n            this.dom.resultDisplay.innerHTML = \"0\";\r\n            if (this.useLeftForSummary) {\r\n                this.leftAsString = \"0\";\r\n            }\r\n            else {\r\n                this.rightAsString = \"0\";\r\n            }\r\n            return;\r\n        }\r\n\r\n        let currentResult = this.dom.resultDisplay.innerHTML;\r\n        let backspacedResult = StringUtility.replaceAt(currentResult, \"\", currentResult.length - 1).trim();\r\n        if (this.useLeftForSummary) {\r\n            this.leftAsString = backspacedResult;\r\n        }\r\n        else {\r\n            this.rightAsString = backspacedResult;\r\n        }\r\n        this.dom.resultDisplay.innerHTML = backspacedResult;\r\n    }\r\n\r\n    private initResultToZero(): void {\r\n        if (this.dom.resultDisplay === null ||\r\n            this.dom.resultDisplay === undefined) {\r\n            console.error(\"initResultToZero(): resultDisplay is null or undefined (bleh)\")\r\n            return;\r\n        }\r\n        this.dom.resultDisplay.innerHTML = \"0\";\r\n    }\r\n\r\n    public init() {\r\n        this.cacheDom();\r\n        this.bindEvents();\r\n        this.initResultToZero();\r\n    }\r\n}\r\n\r\n(function () {\r\n    let main = new MainView();\r\n    main.init()\r\n}());"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}