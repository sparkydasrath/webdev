{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/ts/Ops.ts","src/ts/StringUtility.ts","src/ts/app.ts"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { IOps } from \"./interfaces/IOps\";\r\n\r\nclass Ops implements IOps {\r\n    add(x: number, y: number): number {\r\n        return x + y;\r\n    }\r\n    subtract(x: number, y: number): number {\r\n        return x - y;\r\n    }\r\n    multiply(x: number, y: number): number {\r\n        return x * y;\r\n    }\r\n    divide(x: number, y: number): number {\r\n        if (y === 0) return 0;\r\n        return x / y;\r\n    }\r\n    plusMinus(x: number): number {\r\n        return (-1) * x;\r\n    }\r\n}\r\n\r\nexport default Ops;","export class StringUtility {\r\n    public static replaceAt(oringalString: string, replacementString: string, position: number): string {\r\n        let origAsArray = oringalString.split(\"\");\r\n        origAsArray[position] = replacementString;\r\n        let finalString = origAsArray.join(\"\");\r\n        return finalString;\r\n    }\r\n}\r\n","import Ops from \"./Ops\";\r\nimport { StringUtility } from \"./StringUtility\";\r\n\r\nenum OperatorType {\r\n    None = \"\",\r\n    Add = \"Add\",\r\n    Subtract = \"Subtract\",\r\n    Multiply = \"Multiply\",\r\n    Divide = \"Divide\",\r\n    PlusMinus = \"PlusMinus\",\r\n    Equal = \"Equal\"\r\n}\r\n\r\nclass Dom {\r\n    buttonContainer: HTMLElement | null | undefined;\r\n    addButton: HTMLButtonElement | null | undefined;\r\n    subtractButton: HTMLButtonElement | null | undefined;\r\n    multiplyButton: HTMLButtonElement | null | undefined;\r\n    divideButton: HTMLButtonElement | null | undefined;\r\n    negateButton: HTMLButtonElement | null | undefined;\r\n    equalButton: HTMLButtonElement | null | undefined;\r\n    resultDisplay: HTMLElement | null | undefined;\r\n    summaryDisplay: HTMLElement | null | undefined;\r\n}\r\n\r\nclass MainView {\r\n\r\n    clickEvent: string = \"click\";\r\n    buttonContainerClassName: string = \".btn-container\";\r\n    resultDisplayClassName: string = \".result-display\";\r\n    summaryDisplayClassName: string = \".summary-display\";\r\n\r\n    leftAsString: string = \"\";\r\n    left: number = 0;\r\n    right: number = 0;\r\n    rightAsString: string = \"\";\r\n    total: number = 0;\r\n    opType: OperatorType = OperatorType.None;\r\n    opTypeHtml: string = \"\";\r\n    useLeftForSummary: boolean = true;\r\n    opPressedCount: number = 0;\r\n\r\n    private dom: Dom = new Dom();\r\n    private ops: Ops = new Ops();\r\n\r\n    private cacheDom(): void {\r\n        this.dom.buttonContainer = <HTMLElement>document.querySelector(this.buttonContainerClassName);\r\n        this.dom.summaryDisplay = <HTMLElement>document.querySelector(this.summaryDisplayClassName);\r\n        this.dom.resultDisplay = <HTMLElement>document.querySelector(this.resultDisplayClassName);\r\n    }\r\n\r\n    public bindEvents() {\r\n        if (this.dom.buttonContainer !== null && this.dom.buttonContainer !== undefined) {\r\n            this.dom.buttonContainer.addEventListener(this.clickEvent, this.handleBtnContainerClick);\r\n        }\r\n    }\r\n\r\n    public handleBtnContainerClick = (event: Event): void => {\r\n        // had to do the event handler this way in order to pass along the correct 'this'\r\n        //  context to it\r\n        // see: https://stackoverflow.com/questions/18423410/typescript-retain-scope-in-event-listener\r\n        let srcButton = <HTMLButtonElement>event.srcElement;\r\n        if (srcButton === null || srcButton === undefined) {\r\n            console.error(\"Can't find the button that was clicked\");\r\n            return;\r\n        }\r\n\r\n        let srcButtonValue = srcButton.innerHTML;\r\n        if (srcButtonValue >= \"0\" && srcButtonValue <= \"9\")\r\n            this.handleNumberButtonPressed(srcButtonValue);\r\n        else {\r\n            // get the data that knows what operator button was pressed \r\n            this.opTypeHtml = srcButtonValue;\r\n            this.handleOperatorButtonPressed(srcButton.getAttribute(\"data-opType\"), srcButtonValue);\r\n        };\r\n    }\r\n\r\n    private handleOperatorButtonPressed(opPressed: string | null, htmlContentOfOp: string): void {\r\n\r\n        this.opPressedCount++;\r\n\r\n        if (opPressed === null) {\r\n            console.error(\"Operation selected is null\");\r\n            return;\r\n        }\r\n        else if (opPressed === OperatorType.Equal) {\r\n            this.computeTotal();\r\n            this.updateViewPipeline(true, htmlContentOfOp);\r\n            return;\r\n        }\r\n\r\n        else if (this.opType === OperatorType.None) {\r\n            this.opType = <OperatorType>opPressed;\r\n            this.updateSummaryDisplay(htmlContentOfOp);\r\n            return;\r\n        }\r\n\r\n        else {\r\n\r\n            this.computeTotal();\r\n            this.opType = <OperatorType>opPressed;\r\n            this.updateViewPipeline(false, htmlContentOfOp);\r\n            return;\r\n        }\r\n    }\r\n\r\n    private updateViewPipeline(canClearSummaryDisplay: boolean, htmlContentOfOp: string) {\r\n        if (canClearSummaryDisplay) {\r\n            this.clearSummaryDisplay();\r\n        }\r\n        else {\r\n            this.updateSummaryDisplay(htmlContentOfOp);\r\n        }\r\n\r\n        this.updateLeftAndRightValues();\r\n        this.displayResult();\r\n    }\r\n\r\n\r\n    private computeTotal(): void {\r\n\r\n        this.left = Number(this.leftAsString);\r\n        this.right = Number(this.rightAsString);\r\n\r\n        switch (this.opType) {\r\n            case (OperatorType.None): {\r\n                break;\r\n            }\r\n            case (OperatorType.Add): {\r\n                this.total = this.ops.add(this.left, this.right);\r\n                break;\r\n            }\r\n            case (OperatorType.Subtract): {\r\n                this.total = this.ops.subtract(this.left, this.right);\r\n                break;\r\n            }\r\n            case (OperatorType.Multiply): {\r\n                this.total = this.ops.multiply(this.left, this.right);\r\n                break;\r\n            }\r\n            case (OperatorType.Divide): {\r\n                this.total = this.ops.divide(this.left, this.right);\r\n                break;\r\n            }\r\n            case (OperatorType.PlusMinus): {\r\n                //  need to display negative number\r\n                break;\r\n            }\r\n\r\n            default: {\r\n                console.log(`Operator ${this.opType} is not defined`);\r\n                break;\r\n            }\r\n        }\r\n        // this.updateLeftAndRightValues();\r\n        // this.displayResult();\r\n    }\r\n\r\n    private displayResult(): void {\r\n        if (this.dom.resultDisplay !== null && this.dom.resultDisplay !== undefined) {\r\n            this.dom.resultDisplay.textContent = `${this.total}`;\r\n        }\r\n    }\r\n\r\n    private displayLeft(): void {\r\n        if (this.dom.resultDisplay !== null && this.dom.resultDisplay !== undefined) {\r\n            this.dom.resultDisplay.textContent = this.leftAsString;\r\n        }\r\n    }\r\n\r\n    private displayRight(): void {\r\n        if (this.dom.resultDisplay !== null && this.dom.resultDisplay !== undefined) {\r\n            this.dom.resultDisplay.textContent = this.rightAsString;\r\n        }\r\n    }\r\n    private clearSummaryDisplay(): void {\r\n        if (this.dom.summaryDisplay !== null && this.dom.summaryDisplay !== undefined) {\r\n            this.dom.summaryDisplay.innerHTML = \"\";\r\n            this.useLeftForSummary = true;\r\n        };\r\n    }\r\n\r\n    private updateSummaryDisplay(opPressedHtml: string): void {\r\n        if (this.dom.summaryDisplay === null || this.dom.summaryDisplay === undefined) {\r\n            console.error(\"Unable to populate summary value\");\r\n            return;\r\n        }\r\n\r\n        if (this.opPressedCount > 1) {\r\n            this.partialSummaryDisplayUpdate(opPressedHtml);\r\n            return;\r\n        }\r\n\r\n        if (this.useLeftForSummary) {\r\n            this.fullLeftSummaryDisplayUpdate();\r\n            this.useLeftForSummary = false;\r\n        }\r\n        else {\r\n            // this.dom.summaryDisplay.innerHTML += this.rightAsString + \" \" + this.opTypeHtml + \" \";\r\n            this.fullRightSummaryDisplayUpdate();\r\n        }\r\n    }\r\n\r\n    private fullLeftSummaryDisplayUpdate(): void {\r\n        if (this.dom.summaryDisplay === null || this.dom.summaryDisplay === undefined) {\r\n            console.error(\"fullSummaryDisplayUpdate(): Unable to do a full summary display update\");\r\n            return;\r\n        }\r\n        this.dom.summaryDisplay.innerHTML += this.leftAsString + \" \" + this.opTypeHtml + \" \";\r\n    }\r\n\r\n    private fullRightSummaryDisplayUpdate(): void {\r\n        if (this.dom.summaryDisplay === null || this.dom.summaryDisplay === undefined) {\r\n            console.error(\"fullSummaryDisplayUpdate(): Unable to do a full summary display update\");\r\n            return;\r\n        }\r\n        this.dom.summaryDisplay.innerHTML += this.rightAsString + \" \" + this.opTypeHtml + \" \";\r\n    }\r\n\r\n    private partialSummaryDisplayUpdate(opPressedHtml: string): void {\r\n        if (this.dom.summaryDisplay === null || this.dom.summaryDisplay === undefined) {\r\n            console.error(\"partialSummaryDisplayUpdate(): Unable to do a partial summary display update\");\r\n            return;\r\n        }\r\n        let replaced = this.replaceLastDisplayedOperatorWithCurrentOne(this.dom.summaryDisplay.innerHTML, opPressedHtml);\r\n        this.dom.summaryDisplay.innerHTML = replaced;\r\n    }\r\n\r\n    private replaceLastDisplayedOperatorWithCurrentOne(valueToModify: string, replacementValue: string): string {\r\n\r\n        let currentDisplay = StringUtility.replaceAt(valueToModify, replacementValue, valueToModify.length - 2);\r\n        return currentDisplay;\r\n    }\r\n\r\n    private updateLeftAndRightValues() {\r\n        this.leftAsString = this.total.toString();\r\n        this.left = this.total;\r\n        this.rightAsString = \"\";\r\n        this.right = 0;\r\n    }\r\n\r\n    private handleNumberButtonPressed(pressedNumber: string): void {\r\n\r\n        this.opPressedCount = 0;\r\n\r\n        if (this.leftAsString === \"\" || this.opType === OperatorType.None) {\r\n            this.leftAsString += pressedNumber;\r\n            this.displayLeft();\r\n        }\r\n        else {\r\n            this.rightAsString += pressedNumber;\r\n            this.displayRight();\r\n        }\r\n    }\r\n\r\n    public init() {\r\n        this.cacheDom();\r\n        this.bindEvents();\r\n    }\r\n}\r\n\r\n(function () {\r\n    let main = new MainView();\r\n    main.init()\r\n}());"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}